<?php

/**
 * InventoryTaskTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
/**
 * Feed API
 *
 * <p>The <strong>Feed API</strong> lets sellers upload input files, download reports and files including their status, filter reports using URI parameters, and retrieve customer service metrics task details.</p>
 *
 * The version of the OpenAPI document: v1.3.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-beta
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */
namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;
/**
 * InventoryTaskTest Class Doc Comment
 *
 * @category    Class
 * @description InventoryTask
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class InventoryTaskTest extends TestCase
{
    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }
    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }
    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }
    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }
    /**
     * Test "InventoryTask"
     */
    public function testInventoryTask()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "task_id"
     */
    public function testPropertyTaskId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "feed_type"
     */
    public function testPropertyFeedType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "creation_date"
     */
    public function testPropertyCreationDate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "completion_date"
     */
    public function testPropertyCompletionDate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "schema_version"
     */
    public function testPropertySchemaVersion()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "detail_href"
     */
    public function testPropertyDetailHref()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "upload_summary"
     */
    public function testPropertyUploadSummary()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "filter_criteria"
     */
    public function testPropertyFilterCriteria()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
    /**
     * Test attribute "inventory_file_template"
     */
    public function testPropertyInventoryFileTemplate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}